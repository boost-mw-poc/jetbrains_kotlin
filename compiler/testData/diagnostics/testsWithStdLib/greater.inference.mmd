flowchart TD
    classDef nowrapClass text-align:center,white-space:nowrap;
    classDef callStyle fill:#f2debb,stroke:#333,stroke-width:4px;
    classDef candidateStyle fill:#f2e5ce,stroke:#333,stroke-width:4px;
    classDef stageStyle fill:#c8f0f7,stroke:#333,stroke-width:4px;

    session0["<tt>Source session for module &lt;main></tt>"]
    class session0 nowrapClass;

    session0 --> callGraph78

        subgraph callGraph78["&nbsp;"]
            style callGraph78 fill:#fefefe,stroke:#aeaeae,stroke-width:1px;
            call77["Call 1<br><tt>Expression#(R|&lt;local>/other|)</tt>"]
            class call77 nowrapClass;
            class call77 callStyle;

            call77 --> candidate76

            candidate76["Candidate 1: <tt>FirConstructorSymbol /Expression.Expression</tt><br><br><tt>constructor&lt;T>(x: T): Expression&lt;T></tt>"]
            class candidate76 nowrapClass;
            class candidate76 candidateStyle;

            candidate76 --> stage56

            stage56["Resolution Stages > CreateFreshTypeVariableSubstitutorStage"]
            class stage56 nowrapClass;
            class stage56 stageStyle;

            stage56 ~~~ newVariable57

            newVariable57["New <tt>TypeVariable(T)</tt> for <tt>FirRegularClassSymbol Expression</tt>s parameter 0"]
            class newVariable57 nowrapClass;

            newVariable57 ~~~ stage61

            stage61["Resolution Stages > CheckArguments"]
            class stage61 nowrapClass;
            class stage61 stageStyle;
            constraint62["<tt>T &lt;: TypeVariable(T)</tt><br> <i>from Argument R|<local>/other|</i>"]
            class constraint62 nowrapClass;
            stage61 ~~~ constraint62
        end

        callGraph78 ~~~ callGraph108

        subgraph callGraph108["&nbsp;"]
            style callGraph108 fill:#fefefe,stroke:#aeaeae,stroke-width:1px;
            call107["Call 2<br><tt>GreaterOp#(this@R|/greater|, R?C|/Expression.Expression|(R|&lt;local>/other|))</tt>"]
            class call107 nowrapClass;
            class call107 callStyle;

            call107 --> candidate106

            candidate106["Candidate 1: <tt>FirConstructorSymbol /GreaterOp.GreaterOp</tt><br><br><tt>constructor(expr1: Expression&lt;\*>, expr2: Expression&lt;\*>): GreaterOp</tt>"]
            class candidate106 nowrapClass;
            class candidate106 candidateStyle;

            candidate106 --> stage88

            stage88["Resolution Stages > CheckArguments"]
            class stage88 nowrapClass;
            class stage88 stageStyle;
            constraint89["<tt>Expression&lt;CapturedType(in S)> &lt;: Expression&lt;\*></tt><br> <i>from Argument this|/greater|</i>"]
            class constraint89 nowrapClass;
            stage88 ~~~ constraint89
            constraint90["<tt>Expression&lt;TypeVariable(T)> &lt;: Expression&lt;\*></tt><br> <i>from Argument R?C|/Expression.Expression|(R|<local>/other|)</i>"]
            class constraint90 nowrapClass;
            stage88 ~~~ constraint90

            constraint89 ~~~ stage102
            constraint90 ~~~ stage102

            stage102["Resolution Stages > CheckLambdaAgainstTypeVariableContradiction"]
            class stage102 nowrapClass;
            class stage102 stageStyle;
            constraint103["<tt>GreaterOp &lt;: GreaterOp</tt><br> <i>from ExpectedType for some call</i>"]
            class constraint103 nowrapClass;
            stage102 ~~~ constraint103

            constraint103 ~~~ stage104

            stage104["Call Completion"]
            class stage104 nowrapClass;
            class stage104 stageStyle;
            constraint105["<tt>TypeVariable(T) == T</tt><br> <i>from Fix variable T</i>"]
            class constraint105 nowrapClass;
            stage104 ~~~ constraint105
        end

        callGraph108 ~~~ callGraph178

        subgraph callGraph178["&nbsp;"]
            style callGraph178 fill:#fefefe,stroke:#aeaeae,stroke-width:1px;
            call177["Call 3<br><tt>R|&lt;local>/countExpr|.greater#(IntegerLiteral(0))</tt>"]
            class call177 nowrapClass;
            class call177 callStyle;

            call177 --> candidate176

            candidate176["Candidate 1: <tt>FirNamedFunctionSymbol /greater</tt><br><br><tt>fun &lt;T : Comparable&lt;T>, S : T?> Expression&lt;in S>.greater(other: T): GreaterOp</tt>"]
            class candidate176 nowrapClass;
            class candidate176 candidateStyle;

            candidate176 --> stage132

            stage132["Resolution Stages > CreateFreshTypeVariableSubstitutorStage"]
            class stage132 nowrapClass;
            class stage132 stageStyle;

            stage132 ~~~ newVariable133

            newVariable133["New <tt>TypeVariable(T)</tt> for <tt>FirNamedFunctionSymbol /greater</tt>s parameter 0"]
            class newVariable133 nowrapClass;

            newVariable133 ~~~ newVariable134

            newVariable134["New <tt>TypeVariable(S)</tt> for <tt>FirNamedFunctionSymbol /greater</tt>s parameter 1"]
            class newVariable134 nowrapClass;
            constraint135["<tt>TypeVariable(T) &lt;: Comparable&lt;TypeVariable(T)></tt><br> <i>from DeclaredUpperBound</i>"]
            class constraint135 nowrapClass;
            newVariable134 ~~~ constraint135
            constraint136["<tt>TypeVariable(S) &lt;: TypeVariable(T)?</tt><br> <i>from DeclaredUpperBound</i>"]
            class constraint136 nowrapClass;
            newVariable134 ~~~ constraint136
            constraint137["<tt>TypeVariable(S) &amp; Any &lt;: TypeVariable(T)</tt>"]
            class constraint137 nowrapClass;
            constraint136 --> constraint137
            constraint138["<tt>TypeVariable(S) &lt;: Comparable&lt;TypeVariable(T)>?</tt>"]
            class constraint138 nowrapClass;
            constraint137 --> constraint138
            constraint135 ---> constraint138
            constraint139["<tt>TypeVariable(T) &lt;: Comparable&lt;TypeVariable(S) &amp; Any></tt>"]
            class constraint139 nowrapClass;
            constraint137 --> constraint139
            constraint135 ---> constraint139
            constraint140["<tt>TypeVariable(S) &lt;: Comparable&lt;TypeVariable(S) &amp; Any>?</tt>"]
            class constraint140 nowrapClass;
            constraint137 ---> constraint140
            constraint139 --> constraint140

            constraint138 ~~~~ stage143
            constraint140 ~~~ stage143

            stage143["Resolution Stages > CheckExtensionReceiver"]
            class stage143 nowrapClass;
            class stage143 stageStyle;
            constraint144["<tt>Expression&lt;Long> &lt;: Expression&lt;in TypeVariable(S)></tt><br> <i>from Receiver R|<local>/countExpr|</i>"]
            class constraint144 nowrapClass;
            stage143 ~~~ constraint144
            constraint145["<tt>TypeVariable(S) &lt;: Long</tt>"]
            class constraint145 nowrapClass;
            constraint144 --> constraint145

            constraint145 ~~~ stage146

            stage146["Resolution Stages > CheckArguments"]
            class stage146 nowrapClass;
            class stage146 stageStyle;
            constraint147["<tt>ILT: 0 &lt;: TypeVariable(T)</tt><br> <i>from Argument IntegerLiteral(0)</i>"]
            class constraint147 nowrapClass;
            stage146 ~~~ constraint147
            constraint148["<tt>TypeVariable(T) &lt;: ILT: 0</tt>"]
            class constraint148 nowrapClass;
            constraint147 --> constraint148
            constraint135 --> constraint148
            constraint149["<tt>TypeVariable(S) &lt;: ILT: 0?</tt>"]
            class constraint149 nowrapClass;
            constraint147 --> constraint149
            constraint139 --> constraint149
            constraint150["<tt>TypeVariable(T) &lt;: Comparable&lt;ILT: 0></tt>"]
            class constraint150 nowrapClass;
            constraint147 --> constraint150
            constraint135 --> constraint150
            constraint151["<tt>TypeVariable(S) &lt;: Comparable&lt;ILT: 0>?</tt>"]
            class constraint151 nowrapClass;
            constraint147 ---> constraint151
            constraint138 --> constraint151
            constraint152["<tt>TypeVariable(T) == ILT: 0</tt>"]
            class constraint152 nowrapClass;
            constraint147 ---> constraint152
            constraint148 --> constraint152

            constraint149 ~~~~ readiness167
            constraint150 ~~~~ readiness167
            constraint151 ~~~ readiness167
            constraint152 ~~~ readiness167

            subgraph readiness167["Readiness&nbsp;of&nbsp;Variables"]
                direction TB;
                variableReadiness165["<tt>ConeTypeVariableTypeConstructor(T)</tt> is <tt>WITH_COMPLEX_DEPENDENCY_AND_NO_CONCRETE_CONSTRAINTS</tt>"]
                class variableReadiness165 nowrapClass;

                variableReadiness165 --> variableReadiness166

                variableReadiness166["<tt>ConeTypeVariableTypeConstructor(S)</tt> is <tt>WITH_COMPLEX_DEPENDENCY</tt>"]
                class variableReadiness166 nowrapClass;
            end

            readiness167 --> stage168

            stage168["Call Completion"]
            class stage168 nowrapClass;
            class stage168 stageStyle;
            constraint169["<tt>TypeVariable(S) == Long</tt><br> <i>from Fix variable S</i>"]
            class constraint169 nowrapClass;
            stage168 ~~~ constraint169
            constraint170["<tt>Long &lt;: TypeVariable(T)</tt>"]
            class constraint170 nowrapClass;
            constraint169 --> constraint170
            constraint136 --> constraint170
            constraint171["<tt>TypeVariable(T) &lt;: Long</tt>"]
            class constraint171 nowrapClass;
            constraint169 --> constraint171
            constraint138 --> constraint171
            constraint172["<tt>TypeVariable(S) &lt;: Long?</tt>"]
            class constraint172 nowrapClass;
            constraint169 --> constraint172
            constraint140 --> constraint172
            constraint173["<tt>TypeVariable(T) &lt;: Comparable&lt;Long></tt>"]
            class constraint173 nowrapClass;
            constraint169 ---> constraint173
            constraint139 --> constraint173
            constraint174["<tt>TypeVariable(S) &lt;: Comparable&lt;Long>?</tt>"]
            class constraint174 nowrapClass;
            constraint169 ---> constraint174
            constraint140 --> constraint174
            constraint175["<tt>TypeVariable(T) == Long</tt>"]
            class constraint175 nowrapClass;
            constraint170 --> constraint175
            constraint171 --> constraint175
        end

        callGraph178 ~~~ callGraph245

        subgraph callGraph245["&nbsp;"]
            style callGraph245 fill:#fefefe,stroke:#aeaeae,stroke-width:1px;
            call244["Call 4<br><tt>R|&lt;local>/countExpr|.greater#(String(0))</tt>"]
            class call244 nowrapClass;
            class call244 callStyle;

            call244 --> candidate243

            candidate243["Candidate 1: <tt>FirNamedFunctionSymbol /greater</tt><br><br><tt>fun &lt;T : Comparable&lt;T>, S : T?> Expression&lt;in S>.greater(other: T): GreaterOp</tt>"]
            class candidate243 nowrapClass;
            class candidate243 candidateStyle;

            candidate243 --> stage202

            stage202["Resolution Stages > CreateFreshTypeVariableSubstitutorStage"]
            class stage202 nowrapClass;
            class stage202 stageStyle;

            stage202 ~~~ newVariable203

            newVariable203["New <tt>TypeVariable(T)</tt> for <tt>FirNamedFunctionSymbol /greater</tt>s parameter 0"]
            class newVariable203 nowrapClass;

            newVariable203 ~~~ newVariable204

            newVariable204["New <tt>TypeVariable(S)</tt> for <tt>FirNamedFunctionSymbol /greater</tt>s parameter 1"]
            class newVariable204 nowrapClass;
            constraint205["<tt>TypeVariable(T) &lt;: Comparable&lt;TypeVariable(T)></tt><br> <i>from DeclaredUpperBound</i>"]
            class constraint205 nowrapClass;
            newVariable204 ~~~ constraint205
            constraint206["<tt>TypeVariable(S) &lt;: TypeVariable(T)?</tt><br> <i>from DeclaredUpperBound</i>"]
            class constraint206 nowrapClass;
            newVariable204 ~~~ constraint206
            constraint207["<tt>TypeVariable(S) &amp; Any &lt;: TypeVariable(T)</tt>"]
            class constraint207 nowrapClass;
            constraint206 --> constraint207
            constraint208["<tt>TypeVariable(S) &lt;: Comparable&lt;TypeVariable(T)>?</tt>"]
            class constraint208 nowrapClass;
            constraint207 --> constraint208
            constraint205 ---> constraint208
            constraint209["<tt>TypeVariable(T) &lt;: Comparable&lt;TypeVariable(S) &amp; Any></tt>"]
            class constraint209 nowrapClass;
            constraint207 --> constraint209
            constraint205 ---> constraint209
            constraint210["<tt>TypeVariable(S) &lt;: Comparable&lt;TypeVariable(S) &amp; Any>?</tt>"]
            class constraint210 nowrapClass;
            constraint207 ---> constraint210
            constraint209 --> constraint210

            constraint208 ~~~~ stage213
            constraint210 ~~~ stage213

            stage213["Resolution Stages > CheckExtensionReceiver"]
            class stage213 nowrapClass;
            class stage213 stageStyle;
            constraint214["<tt>Expression&lt;Long> &lt;: Expression&lt;in TypeVariable(S)></tt><br> <i>from Receiver R|<local>/countExpr|</i>"]
            class constraint214 nowrapClass;
            stage213 ~~~ constraint214
            constraint215["<tt>TypeVariable(S) &lt;: Long</tt>"]
            class constraint215 nowrapClass;
            constraint214 --> constraint215

            constraint215 ~~~ stage216

            stage216["Resolution Stages > CheckArguments"]
            class stage216 nowrapClass;
            class stage216 stageStyle;
            constraint217["<tt>String &lt;: TypeVariable(T)</tt><br> <i>from Argument String(0)</i>"]
            class constraint217 nowrapClass;
            stage216 ~~~ constraint217
            constraint218["<tt>TypeVariable(T) &lt;: String</tt>"]
            class constraint218 nowrapClass;
            constraint217 --> constraint218
            constraint205 --> constraint218
            constraint219["<tt>TypeVariable(S) &lt;: String?</tt>"]
            class constraint219 nowrapClass;
            constraint217 --> constraint219
            constraint209 --> constraint219
            constraint220["<tt>TypeVariable(T) &lt;: Comparable&lt;String></tt>"]
            class constraint220 nowrapClass;
            constraint217 --> constraint220
            constraint205 --> constraint220
            constraint221["<tt>TypeVariable(S) &lt;: Comparable&lt;String>?</tt>"]
            class constraint221 nowrapClass;
            constraint217 ---> constraint221
            constraint208 --> constraint221
            constraint222["<tt>TypeVariable(T) == String</tt>"]
            class constraint222 nowrapClass;
            constraint217 ---> constraint222
            constraint218 --> constraint222

            constraint219 ~~~~ readiness237
            constraint220 ~~~~ readiness237
            constraint221 ~~~ readiness237
            constraint222 ~~~ readiness237

            subgraph readiness237["Readiness&nbsp;of&nbsp;Variables"]
                direction TB;
                variableReadiness235["<tt>ConeTypeVariableTypeConstructor(T)</tt> is <tt>WITH_COMPLEX_DEPENDENCY_BUT_PROPER_EQUALITY_CONSTRAINT</tt>"]
                class variableReadiness235 nowrapClass;

                variableReadiness235 --> variableReadiness236

                variableReadiness236["<tt>ConeTypeVariableTypeConstructor(S)</tt> is <tt>WITH_COMPLEX_DEPENDENCY</tt>"]
                class variableReadiness236 nowrapClass;
            end

            readiness237 --> stage238

            stage238["Call Completion"]
            class stage238 nowrapClass;
            class stage238 stageStyle;

            stage238 ~~~ error239

            error239["<b>InferredEmptyIntersectionWarning<b>"]
            class error239 nowrapClass;
            constraint240["<tt>TypeVariable(S) == it(Long &amp; String)</tt><br> <i>from Fix variable S</i>"]
            class constraint240 nowrapClass;
            error239 ~~~ constraint240
            constraint241["<tt>TypeVariable(S) &lt;: Long?</tt>"]
            class constraint241 nowrapClass;
            constraint240 --> constraint241
            constraint210 --> constraint241
            constraint242["<tt>TypeVariable(S) &lt;: Comparable&lt;it(Long &amp; String)>?</tt>"]
            class constraint242 nowrapClass;
            constraint240 --> constraint242
            constraint210 --> constraint242
        end

        callGraph245 ~~~ callGraph312

        subgraph callGraph312["&nbsp;"]
            style callGraph312 fill:#fefefe,stroke:#aeaeae,stroke-width:1px;
            call311["Call 5<br><tt>R|&lt;local>/countExpr|.greater#&lt;R|kotlin/String|, R|kotlin/Nothing|>(String(0))</tt>"]
            class call311 nowrapClass;
            class call311 callStyle;

            call311 --> candidate310

            candidate310["Candidate 1: <tt>FirNamedFunctionSymbol /greater</tt><br><br><tt>fun &lt;T : Comparable&lt;T>, S : T?> Expression&lt;in S>.greater(other: T): GreaterOp</tt>"]
            class candidate310 nowrapClass;
            class candidate310 candidateStyle;

            candidate310 --> stage269

            stage269["Resolution Stages > CreateFreshTypeVariableSubstitutorStage"]
            class stage269 nowrapClass;
            class stage269 stageStyle;

            stage269 ~~~ newVariable270

            newVariable270["New <tt>TypeVariable(T)</tt> for <tt>FirNamedFunctionSymbol /greater</tt>s parameter 0"]
            class newVariable270 nowrapClass;

            newVariable270 ~~~ newVariable271

            newVariable271["New <tt>TypeVariable(S)</tt> for <tt>FirNamedFunctionSymbol /greater</tt>s parameter 1"]
            class newVariable271 nowrapClass;
            constraint272["<tt>TypeVariable(T) &lt;: Comparable&lt;TypeVariable(T)></tt><br> <i>from DeclaredUpperBound</i>"]
            class constraint272 nowrapClass;
            newVariable271 ~~~ constraint272
            constraint273["<tt>TypeVariable(S) &lt;: TypeVariable(T)?</tt><br> <i>from DeclaredUpperBound</i>"]
            class constraint273 nowrapClass;
            newVariable271 ~~~ constraint273
            constraint274["<tt>TypeVariable(S) &amp; Any &lt;: TypeVariable(T)</tt>"]
            class constraint274 nowrapClass;
            constraint273 --> constraint274
            constraint275["<tt>TypeVariable(S) &lt;: Comparable&lt;TypeVariable(T)>?</tt>"]
            class constraint275 nowrapClass;
            constraint274 --> constraint275
            constraint272 ---> constraint275
            constraint276["<tt>TypeVariable(T) &lt;: Comparable&lt;TypeVariable(S) &amp; Any></tt>"]
            class constraint276 nowrapClass;
            constraint274 --> constraint276
            constraint272 ---> constraint276
            constraint277["<tt>TypeVariable(S) &lt;: Comparable&lt;TypeVariable(S) &amp; Any>?</tt>"]
            class constraint277 nowrapClass;
            constraint274 ---> constraint277
            constraint276 --> constraint277
            constraint278["<tt>TypeVariable(T) == String</tt><br> <i>from TypeParameter R|kotlin/String|</i>"]
            class constraint278 nowrapClass;
            newVariable271 ~~~ constraint278
            constraint279["<tt>TypeVariable(S) &lt;: String?</tt>"]
            class constraint279 nowrapClass;
            constraint274 --> constraint279
            constraint278 ---> constraint279
            constraint280["<tt>TypeVariable(T) &lt;: String</tt>"]
            class constraint280 nowrapClass;
            constraint278 --> constraint280
            constraint272 --> constraint280
            constraint281["<tt>TypeVariable(T) &lt;: Comparable&lt;String></tt>"]
            class constraint281 nowrapClass;
            constraint278 --> constraint281
            constraint272 --> constraint281
            constraint282["<tt>TypeVariable(S) &lt;: Comparable&lt;String>?</tt>"]
            class constraint282 nowrapClass;
            constraint278 ----> constraint282
            constraint275 --> constraint282
            constraint283["<tt>TypeVariable(S) == Nothing</tt><br> <i>from TypeParameter R|kotlin/Nothing|</i>"]
            class constraint283 nowrapClass;
            newVariable271 ~~~~~~ constraint283
            constraint284["<tt>Nothing &lt;: TypeVariable(T)</tt>"]
            class constraint284 nowrapClass;
            constraint283 --> constraint284
            constraint273 -----> constraint284
            constraint285["<tt>TypeVariable(T) &lt;: Comparable&lt;Nothing></tt>"]
            class constraint285 nowrapClass;
            constraint283 --> constraint285
            constraint276 ---> constraint285
            constraint286["<tt>TypeVariable(S) &lt;: Comparable&lt;Nothing>?</tt>"]
            class constraint286 nowrapClass;
            constraint283 --> constraint286
            constraint277 --> constraint286

            constraint279 ~~~~~ stage289
            constraint280 ~~~~~~ stage289
            constraint281 ~~~~~~ stage289
            constraint282 ~~~~ stage289
            constraint284 ~~~ stage289
            constraint285 ~~~ stage289
            constraint286 ~~~ stage289

            stage289["Resolution Stages > CheckExtensionReceiver"]
            class stage289 nowrapClass;
            class stage289 stageStyle;
            constraint290["<tt>Expression&lt;Long> &lt;: Expression&lt;in TypeVariable(S)></tt><br> <i>from Receiver R|<local>/countExpr|</i>"]
            class constraint290 nowrapClass;
            stage289 ~~~ constraint290
            constraint291["<tt>TypeVariable(S) &lt;: Long</tt>"]
            class constraint291 nowrapClass;
            constraint290 --> constraint291

            constraint291 ~~~ stage292

            stage292["Resolution Stages > CheckArguments"]
            class stage292 nowrapClass;
            class stage292 stageStyle;
            constraint293["<tt>String &lt;: TypeVariable(T)</tt><br> <i>from Argument String(0)</i>"]
            class constraint293 nowrapClass;
            stage292 ~~~ constraint293

            constraint293 ~~~ readiness308

            subgraph readiness308["Readiness&nbsp;of&nbsp;Variables"]
                direction TB;
                variableReadiness306["<tt>ConeTypeVariableTypeConstructor(T)</tt> is <tt>WITH_COMPLEX_DEPENDENCY_BUT_PROPER_EQUALITY_CONSTRAINT</tt>"]
                class variableReadiness306 nowrapClass;

                variableReadiness306 --> variableReadiness307

                variableReadiness307["<tt>ConeTypeVariableTypeConstructor(S)</tt> is <tt>WITH_COMPLEX_DEPENDENCY_BUT_PROPER_EQUALITY_CONSTRAINT</tt>"]
                class variableReadiness307 nowrapClass;
            end
        end