flowchart TD
    classDef nowrapClass text-align:center,white-space:nowrap;
    classDef callStyle fill:#f2debb,stroke:#333,stroke-width:4px;
    classDef candidateStyle fill:#f2e5ce,stroke:#333,stroke-width:4px;
    classDef stageStyle fill:#c8f0f7,stroke:#333,stroke-width:4px;

    session0["<tt>Source session for module &lt;main></tt>"]
    class session0 nowrapClass;

    session0 --> callGraph78

        subgraph callGraph78["&nbsp;"]
            style callGraph78 fill:#fefefe,stroke:#aeaeae,stroke-width:1px;
            call77["Call 1<br><tt>Expression#(R|&lt;local>/other|)</tt>"]
            class call77 nowrapClass;
            class call77 callStyle;

            call77 --> candidate76

            candidate76["Candidate 1: <tt>FirConstructorSymbol /Expression.Expression</tt><br><br><tt>constructor&lt;T>(x: T): Expression&lt;T></tt>"]
            class candidate76 nowrapClass;
            class candidate76 candidateStyle;

            candidate76 --> stage56

            stage56["Resolution Stages > CreateFreshTypeVariableSubstitutorStage"]
            class stage56 nowrapClass;
            class stage56 stageStyle;

            stage56 ~~~ newVariable57

            newVariable57["New <tt>TypeVariable(T)</tt> for <tt>FirRegularClassSymbol Expression</tt>s parameter 0"]
            class newVariable57 nowrapClass;

            newVariable57 ~~~ stage61

            stage61["Resolution Stages > CheckArguments"]
            class stage61 nowrapClass;
            class stage61 stageStyle;
            constraint62["<tt>T &lt;: TypeVariable(T)</tt><br> <i>from Argument R|<local>/other|</i>"]
            class constraint62 nowrapClass;
            stage61 ~~~ constraint62
        end

        callGraph78 ~~~ callGraph108

        subgraph callGraph108["&nbsp;"]
            style callGraph108 fill:#fefefe,stroke:#aeaeae,stroke-width:1px;
            call107["Call 2<br><tt>GreaterOp#(this@R|/greater|, R?C|/Expression.Expression|(R|&lt;local>/other|))</tt>"]
            class call107 nowrapClass;
            class call107 callStyle;

            call107 --> candidate106

            candidate106["Candidate 1: <tt>FirConstructorSymbol /GreaterOp.GreaterOp</tt><br><br><tt>constructor(expr1: Expression&lt;\*>, expr2: Expression&lt;\*>): GreaterOp</tt>"]
            class candidate106 nowrapClass;
            class candidate106 candidateStyle;

            candidate106 --> stage88

            stage88["Resolution Stages > CheckArguments"]
            class stage88 nowrapClass;
            class stage88 stageStyle;
            constraint89["<tt>Expression&lt;CapturedType(in S)> &lt;: Expression&lt;\*></tt><br> <i>from Argument this|/greater|</i>"]
            class constraint89 nowrapClass;
            stage88 ~~~ constraint89
            constraint90["<tt>Expression&lt;TypeVariable(T)> &lt;: Expression&lt;\*></tt><br> <i>from Argument R?C|/Expression.Expression|(R|<local>/other|)</i>"]
            class constraint90 nowrapClass;
            stage88 ~~~ constraint90

            constraint89 ~~~ stage102
            constraint90 ~~~ stage102

            stage102["Resolution Stages > CheckLambdaAgainstTypeVariableContradiction"]
            class stage102 nowrapClass;
            class stage102 stageStyle;
            constraint103["<tt>GreaterOp &lt;: GreaterOp</tt><br> <i>from ExpectedType for some call</i>"]
            class constraint103 nowrapClass;
            stage102 ~~~ constraint103

            constraint103 ~~~ stage104

            stage104["Call Completion"]
            class stage104 nowrapClass;
            class stage104 stageStyle;
            constraint105["<tt>TypeVariable(T) == T</tt><br> <i>from Fix variable T</i>"]
            class constraint105 nowrapClass;
            stage104 ~~~ constraint105
        end

        callGraph108 ~~~ callGraph181

        subgraph callGraph181["&nbsp;"]
            style callGraph181 fill:#fefefe,stroke:#aeaeae,stroke-width:1px;
            call180["Call 3<br><tt>R|&lt;local>/countExpr|.greater#(IntegerLiteral(0))</tt>"]
            class call180 nowrapClass;
            class call180 callStyle;

            call180 --> candidate179

            candidate179["Candidate 1: <tt>FirNamedFunctionSymbol /greater</tt><br><br><tt>fun &lt;T : Comparable&lt;T>, S : T?> Expression&lt;in S>.greater(other: T): GreaterOp</tt>"]
            class candidate179 nowrapClass;
            class candidate179 candidateStyle;

            candidate179 --> stage132

            stage132["Resolution Stages > CreateFreshTypeVariableSubstitutorStage"]
            class stage132 nowrapClass;
            class stage132 stageStyle;

            stage132 ~~~ newVariable133

            newVariable133["New <tt>TypeVariable(T)</tt> for <tt>FirNamedFunctionSymbol /greater</tt>s parameter 0"]
            class newVariable133 nowrapClass;

            newVariable133 ~~~ newVariable134

            newVariable134["New <tt>TypeVariable(S)</tt> for <tt>FirNamedFunctionSymbol /greater</tt>s parameter 1"]
            class newVariable134 nowrapClass;
            constraint135["<tt>TypeVariable(T) &lt;: Comparable&lt;TypeVariable(T)></tt><br> <i>from DeclaredUpperBound</i>"]
            class constraint135 nowrapClass;
            newVariable134 ~~~ constraint135
            constraint136["<tt>TypeVariable(S) &lt;: TypeVariable(T)?</tt><br> <i>from DeclaredUpperBound</i>"]
            class constraint136 nowrapClass;
            newVariable134 ~~~ constraint136
            constraint137["<tt>TypeVariable(S) &amp; Any &lt;: TypeVariable(T)</tt>"]
            class constraint137 nowrapClass;
            constraint136 --> constraint137
            constraint138["<tt>TypeVariable(S) &lt;: Comparable&lt;TypeVariable(T)>?</tt>"]
            class constraint138 nowrapClass;
            constraint137 --> constraint138
            constraint135 ---> constraint138
            constraint139["<tt>TypeVariable(T) &lt;: Comparable&lt;TypeVariable(S) &amp; Any></tt>"]
            class constraint139 nowrapClass;
            constraint137 --> constraint139
            constraint135 ---> constraint139
            constraint140["<tt>TypeVariable(S) &lt;: Comparable&lt;TypeVariable(S) &amp; Any>?</tt>"]
            class constraint140 nowrapClass;
            constraint137 ---> constraint140
            constraint139 --> constraint140

            constraint138 ~~~~ stage143
            constraint140 ~~~ stage143

            stage143["Resolution Stages > CheckExtensionReceiver"]
            class stage143 nowrapClass;
            class stage143 stageStyle;
            constraint144["<tt>Expression&lt;Long> &lt;: Expression&lt;in TypeVariable(S)></tt><br> <i>from Receiver R|<local>/countExpr|</i>"]
            class constraint144 nowrapClass;
            stage143 ~~~ constraint144
            constraint145["<tt>TypeVariable(S) &lt;: Long</tt>"]
            class constraint145 nowrapClass;
            constraint144 --> constraint145

            constraint145 ~~~ stage146

            stage146["Resolution Stages > CheckArguments"]
            class stage146 nowrapClass;
            class stage146 stageStyle;
            constraint147["<tt>ILT: 0 &lt;: TypeVariable(T)</tt><br> <i>from Argument IntegerLiteral(0)</i>"]
            class constraint147 nowrapClass;
            stage146 ~~~ constraint147
            constraint148["<tt>TypeVariable(T) &lt;: ILT: 0</tt>"]
            class constraint148 nowrapClass;
            constraint147 --> constraint148
            constraint135 --> constraint148
            constraint149["<tt>TypeVariable(S) &lt;: ILT: 0?</tt>"]
            class constraint149 nowrapClass;
            constraint147 --> constraint149
            constraint139 --> constraint149
            constraint150["<tt>TypeVariable(T) &lt;: Comparable&lt;ILT: 0></tt>"]
            class constraint150 nowrapClass;
            constraint147 --> constraint150
            constraint135 --> constraint150
            constraint151["<tt>TypeVariable(S) &lt;: Comparable&lt;ILT: 0>?</tt>"]
            class constraint151 nowrapClass;
            constraint147 ---> constraint151
            constraint138 --> constraint151
            constraint152["<tt>TypeVariable(T) == ILT: 0</tt>"]
            class constraint152 nowrapClass;
            constraint147 ---> constraint152
            constraint148 --> constraint152

            constraint149 ~~~~ readiness167
            constraint150 ~~~~ readiness167
            constraint151 ~~~ readiness167
            constraint152 ~~~ readiness167

            subgraph readiness167["Readiness&nbsp;of&nbsp;Variables"]
                direction TB;
                variableReadiness165["<tt>ConeTypeVariableTypeConstructor(T)</tt> is <tt>WITH_COMPLEX_DEPENDENCY_AND_NO_CONCRETE_CONSTRAINTS</tt>"]
                class variableReadiness165 nowrapClass;

                variableReadiness165 --> variableReadiness166

                variableReadiness166["<tt>ConeTypeVariableTypeConstructor(S)</tt> is <tt>WITH_COMPLEX_DEPENDENCY</tt>"]
                class variableReadiness166 nowrapClass;
            end

            readiness167 --> readiness170

            subgraph readiness170["Readiness&nbsp;of&nbsp;Variables"]
                direction TB;
                variableReadiness168["<tt>ConeTypeVariableTypeConstructor(T)</tt> is <tt>WITH_COMPLEX_DEPENDENCY_AND_NO_CONCRETE_CONSTRAINTS</tt>"]
                class variableReadiness168 nowrapClass;

                variableReadiness168 --> variableReadiness169

                variableReadiness169["<tt>ConeTypeVariableTypeConstructor(S)</tt> is <tt>WITH_COMPLEX_DEPENDENCY</tt>"]
                class variableReadiness169 nowrapClass;
            end

            readiness170 --> stage171

            stage171["Call Completion"]
            class stage171 nowrapClass;
            class stage171 stageStyle;
            constraint172["<tt>TypeVariable(S) == Long</tt><br> <i>from Fix variable S</i>"]
            class constraint172 nowrapClass;
            stage171 ~~~ constraint172
            constraint173["<tt>Long &lt;: TypeVariable(T)</tt>"]
            class constraint173 nowrapClass;
            constraint172 --> constraint173
            constraint136 --> constraint173
            constraint174["<tt>TypeVariable(T) &lt;: Long</tt>"]
            class constraint174 nowrapClass;
            constraint172 --> constraint174
            constraint138 --> constraint174
            constraint175["<tt>TypeVariable(S) &lt;: Long?</tt>"]
            class constraint175 nowrapClass;
            constraint172 --> constraint175
            constraint140 --> constraint175
            constraint176["<tt>TypeVariable(T) &lt;: Comparable&lt;Long></tt>"]
            class constraint176 nowrapClass;
            constraint172 ---> constraint176
            constraint139 --> constraint176
            constraint177["<tt>TypeVariable(S) &lt;: Comparable&lt;Long>?</tt>"]
            class constraint177 nowrapClass;
            constraint172 ---> constraint177
            constraint140 --> constraint177
            constraint178["<tt>TypeVariable(T) == Long</tt>"]
            class constraint178 nowrapClass;
            constraint173 --> constraint178
            constraint174 --> constraint178
        end

        callGraph181 ~~~ callGraph251

        subgraph callGraph251["&nbsp;"]
            style callGraph251 fill:#fefefe,stroke:#aeaeae,stroke-width:1px;
            call250["Call 4<br><tt>R|&lt;local>/countExpr|.greater#(String(0))</tt>"]
            class call250 nowrapClass;
            class call250 callStyle;

            call250 --> candidate249

            candidate249["Candidate 1: <tt>FirNamedFunctionSymbol /greater</tt><br><br><tt>fun &lt;T : Comparable&lt;T>, S : T?> Expression&lt;in S>.greater(other: T): GreaterOp</tt>"]
            class candidate249 nowrapClass;
            class candidate249 candidateStyle;

            candidate249 --> stage205

            stage205["Resolution Stages > CreateFreshTypeVariableSubstitutorStage"]
            class stage205 nowrapClass;
            class stage205 stageStyle;

            stage205 ~~~ newVariable206

            newVariable206["New <tt>TypeVariable(T)</tt> for <tt>FirNamedFunctionSymbol /greater</tt>s parameter 0"]
            class newVariable206 nowrapClass;

            newVariable206 ~~~ newVariable207

            newVariable207["New <tt>TypeVariable(S)</tt> for <tt>FirNamedFunctionSymbol /greater</tt>s parameter 1"]
            class newVariable207 nowrapClass;
            constraint208["<tt>TypeVariable(T) &lt;: Comparable&lt;TypeVariable(T)></tt><br> <i>from DeclaredUpperBound</i>"]
            class constraint208 nowrapClass;
            newVariable207 ~~~ constraint208
            constraint209["<tt>TypeVariable(S) &lt;: TypeVariable(T)?</tt><br> <i>from DeclaredUpperBound</i>"]
            class constraint209 nowrapClass;
            newVariable207 ~~~ constraint209
            constraint210["<tt>TypeVariable(S) &amp; Any &lt;: TypeVariable(T)</tt>"]
            class constraint210 nowrapClass;
            constraint209 --> constraint210
            constraint211["<tt>TypeVariable(S) &lt;: Comparable&lt;TypeVariable(T)>?</tt>"]
            class constraint211 nowrapClass;
            constraint210 --> constraint211
            constraint208 ---> constraint211
            constraint212["<tt>TypeVariable(T) &lt;: Comparable&lt;TypeVariable(S) &amp; Any></tt>"]
            class constraint212 nowrapClass;
            constraint210 --> constraint212
            constraint208 ---> constraint212
            constraint213["<tt>TypeVariable(S) &lt;: Comparable&lt;TypeVariable(S) &amp; Any>?</tt>"]
            class constraint213 nowrapClass;
            constraint210 ---> constraint213
            constraint212 --> constraint213

            constraint211 ~~~~ stage216
            constraint213 ~~~ stage216

            stage216["Resolution Stages > CheckExtensionReceiver"]
            class stage216 nowrapClass;
            class stage216 stageStyle;
            constraint217["<tt>Expression&lt;Long> &lt;: Expression&lt;in TypeVariable(S)></tt><br> <i>from Receiver R|<local>/countExpr|</i>"]
            class constraint217 nowrapClass;
            stage216 ~~~ constraint217
            constraint218["<tt>TypeVariable(S) &lt;: Long</tt>"]
            class constraint218 nowrapClass;
            constraint217 --> constraint218

            constraint218 ~~~ stage219

            stage219["Resolution Stages > CheckArguments"]
            class stage219 nowrapClass;
            class stage219 stageStyle;
            constraint220["<tt>String &lt;: TypeVariable(T)</tt><br> <i>from Argument String(0)</i>"]
            class constraint220 nowrapClass;
            stage219 ~~~ constraint220
            constraint221["<tt>TypeVariable(T) &lt;: String</tt>"]
            class constraint221 nowrapClass;
            constraint220 --> constraint221
            constraint208 --> constraint221
            constraint222["<tt>TypeVariable(S) &lt;: String?</tt>"]
            class constraint222 nowrapClass;
            constraint220 --> constraint222
            constraint212 --> constraint222
            constraint223["<tt>TypeVariable(T) &lt;: Comparable&lt;String></tt>"]
            class constraint223 nowrapClass;
            constraint220 --> constraint223
            constraint208 --> constraint223
            constraint224["<tt>TypeVariable(S) &lt;: Comparable&lt;String>?</tt>"]
            class constraint224 nowrapClass;
            constraint220 ---> constraint224
            constraint211 --> constraint224
            constraint225["<tt>TypeVariable(T) == String</tt>"]
            class constraint225 nowrapClass;
            constraint220 ---> constraint225
            constraint221 --> constraint225

            constraint222 ~~~~ readiness240
            constraint223 ~~~~ readiness240
            constraint224 ~~~ readiness240
            constraint225 ~~~ readiness240

            subgraph readiness240["Readiness&nbsp;of&nbsp;Variables"]
                direction TB;
                variableReadiness238["<tt>ConeTypeVariableTypeConstructor(T)</tt> is <tt>WITH_COMPLEX_DEPENDENCY_BUT_PROPER_EQUALITY_CONSTRAINT</tt>"]
                class variableReadiness238 nowrapClass;

                variableReadiness238 --> variableReadiness239

                variableReadiness239["<tt>ConeTypeVariableTypeConstructor(S)</tt> is <tt>WITH_COMPLEX_DEPENDENCY</tt>"]
                class variableReadiness239 nowrapClass;
            end

            readiness240 --> readiness243

            subgraph readiness243["Readiness&nbsp;of&nbsp;Variables"]
                direction TB;
                variableReadiness241["<tt>ConeTypeVariableTypeConstructor(T)</tt> is <tt>WITH_COMPLEX_DEPENDENCY_BUT_PROPER_EQUALITY_CONSTRAINT</tt>"]
                class variableReadiness241 nowrapClass;

                variableReadiness241 --> variableReadiness242

                variableReadiness242["<tt>ConeTypeVariableTypeConstructor(S)</tt> is <tt>WITH_COMPLEX_DEPENDENCY</tt>"]
                class variableReadiness242 nowrapClass;
            end

            readiness243 --> stage244

            stage244["Call Completion"]
            class stage244 nowrapClass;
            class stage244 stageStyle;

            stage244 ~~~ error245

            error245["<b>InferredEmptyIntersectionWarning<b>"]
            class error245 nowrapClass;
            constraint246["<tt>TypeVariable(S) == it(Long &amp; String)</tt><br> <i>from Fix variable S</i>"]
            class constraint246 nowrapClass;
            error245 ~~~ constraint246
            constraint247["<tt>TypeVariable(S) &lt;: Long?</tt>"]
            class constraint247 nowrapClass;
            constraint246 --> constraint247
            constraint213 --> constraint247
            constraint248["<tt>TypeVariable(S) &lt;: Comparable&lt;it(Long &amp; String)>?</tt>"]
            class constraint248 nowrapClass;
            constraint246 --> constraint248
            constraint213 --> constraint248
        end

        callGraph251 ~~~ callGraph321

        subgraph callGraph321["&nbsp;"]
            style callGraph321 fill:#fefefe,stroke:#aeaeae,stroke-width:1px;
            call320["Call 5<br><tt>R|&lt;local>/countExpr|.greater#&lt;R|kotlin/String|, R|kotlin/Nothing|>(String(0))</tt>"]
            class call320 nowrapClass;
            class call320 callStyle;

            call320 --> candidate319

            candidate319["Candidate 1: <tt>FirNamedFunctionSymbol /greater</tt><br><br><tt>fun &lt;T : Comparable&lt;T>, S : T?> Expression&lt;in S>.greater(other: T): GreaterOp</tt>"]
            class candidate319 nowrapClass;
            class candidate319 candidateStyle;

            candidate319 --> stage275

            stage275["Resolution Stages > CreateFreshTypeVariableSubstitutorStage"]
            class stage275 nowrapClass;
            class stage275 stageStyle;

            stage275 ~~~ newVariable276

            newVariable276["New <tt>TypeVariable(T)</tt> for <tt>FirNamedFunctionSymbol /greater</tt>s parameter 0"]
            class newVariable276 nowrapClass;

            newVariable276 ~~~ newVariable277

            newVariable277["New <tt>TypeVariable(S)</tt> for <tt>FirNamedFunctionSymbol /greater</tt>s parameter 1"]
            class newVariable277 nowrapClass;
            constraint278["<tt>TypeVariable(T) &lt;: Comparable&lt;TypeVariable(T)></tt><br> <i>from DeclaredUpperBound</i>"]
            class constraint278 nowrapClass;
            newVariable277 ~~~ constraint278
            constraint279["<tt>TypeVariable(S) &lt;: TypeVariable(T)?</tt><br> <i>from DeclaredUpperBound</i>"]
            class constraint279 nowrapClass;
            newVariable277 ~~~ constraint279
            constraint280["<tt>TypeVariable(S) &amp; Any &lt;: TypeVariable(T)</tt>"]
            class constraint280 nowrapClass;
            constraint279 --> constraint280
            constraint281["<tt>TypeVariable(S) &lt;: Comparable&lt;TypeVariable(T)>?</tt>"]
            class constraint281 nowrapClass;
            constraint280 --> constraint281
            constraint278 ---> constraint281
            constraint282["<tt>TypeVariable(T) &lt;: Comparable&lt;TypeVariable(S) &amp; Any></tt>"]
            class constraint282 nowrapClass;
            constraint280 --> constraint282
            constraint278 ---> constraint282
            constraint283["<tt>TypeVariable(S) &lt;: Comparable&lt;TypeVariable(S) &amp; Any>?</tt>"]
            class constraint283 nowrapClass;
            constraint280 ---> constraint283
            constraint282 --> constraint283
            constraint284["<tt>TypeVariable(T) == String</tt><br> <i>from TypeParameter R|kotlin/String|</i>"]
            class constraint284 nowrapClass;
            newVariable277 ~~~ constraint284
            constraint285["<tt>TypeVariable(S) &lt;: String?</tt>"]
            class constraint285 nowrapClass;
            constraint280 --> constraint285
            constraint284 ---> constraint285
            constraint286["<tt>TypeVariable(T) &lt;: String</tt>"]
            class constraint286 nowrapClass;
            constraint284 --> constraint286
            constraint278 --> constraint286
            constraint287["<tt>TypeVariable(T) &lt;: Comparable&lt;String></tt>"]
            class constraint287 nowrapClass;
            constraint284 --> constraint287
            constraint278 --> constraint287
            constraint288["<tt>TypeVariable(S) &lt;: Comparable&lt;String>?</tt>"]
            class constraint288 nowrapClass;
            constraint284 ----> constraint288
            constraint281 --> constraint288
            constraint289["<tt>TypeVariable(S) == Nothing</tt><br> <i>from TypeParameter R|kotlin/Nothing|</i>"]
            class constraint289 nowrapClass;
            newVariable277 ~~~~~~ constraint289
            constraint290["<tt>Nothing &lt;: TypeVariable(T)</tt>"]
            class constraint290 nowrapClass;
            constraint289 --> constraint290
            constraint279 -----> constraint290
            constraint291["<tt>TypeVariable(T) &lt;: Comparable&lt;Nothing></tt>"]
            class constraint291 nowrapClass;
            constraint289 --> constraint291
            constraint282 ---> constraint291
            constraint292["<tt>TypeVariable(S) &lt;: Comparable&lt;Nothing>?</tt>"]
            class constraint292 nowrapClass;
            constraint289 --> constraint292
            constraint283 --> constraint292

            constraint285 ~~~~~ stage295
            constraint286 ~~~~~~ stage295
            constraint287 ~~~~~~ stage295
            constraint288 ~~~~ stage295
            constraint290 ~~~ stage295
            constraint291 ~~~ stage295
            constraint292 ~~~ stage295

            stage295["Resolution Stages > CheckExtensionReceiver"]
            class stage295 nowrapClass;
            class stage295 stageStyle;
            constraint296["<tt>Expression&lt;Long> &lt;: Expression&lt;in TypeVariable(S)></tt><br> <i>from Receiver R|<local>/countExpr|</i>"]
            class constraint296 nowrapClass;
            stage295 ~~~ constraint296
            constraint297["<tt>TypeVariable(S) &lt;: Long</tt>"]
            class constraint297 nowrapClass;
            constraint296 --> constraint297

            constraint297 ~~~ stage298

            stage298["Resolution Stages > CheckArguments"]
            class stage298 nowrapClass;
            class stage298 stageStyle;
            constraint299["<tt>String &lt;: TypeVariable(T)</tt><br> <i>from Argument String(0)</i>"]
            class constraint299 nowrapClass;
            stage298 ~~~ constraint299

            constraint299 ~~~ readiness314

            subgraph readiness314["Readiness&nbsp;of&nbsp;Variables"]
                direction TB;
                variableReadiness312["<tt>ConeTypeVariableTypeConstructor(T)</tt> is <tt>WITH_COMPLEX_DEPENDENCY_BUT_PROPER_EQUALITY_CONSTRAINT</tt>"]
                class variableReadiness312 nowrapClass;

                variableReadiness312 --> variableReadiness313

                variableReadiness313["<tt>ConeTypeVariableTypeConstructor(S)</tt> is <tt>WITH_COMPLEX_DEPENDENCY_BUT_PROPER_EQUALITY_CONSTRAINT</tt>"]
                class variableReadiness313 nowrapClass;
            end

            readiness314 --> readiness317

            subgraph readiness317["Readiness&nbsp;of&nbsp;Variables"]
                direction TB;
                variableReadiness315["<tt>ConeTypeVariableTypeConstructor(T)</tt> is <tt>WITH_COMPLEX_DEPENDENCY_BUT_PROPER_EQUALITY_CONSTRAINT</tt>"]
                class variableReadiness315 nowrapClass;

                variableReadiness315 --> variableReadiness316

                variableReadiness316["<tt>ConeTypeVariableTypeConstructor(S)</tt> is <tt>WITH_COMPLEX_DEPENDENCY_BUT_PROPER_EQUALITY_CONSTRAINT</tt>"]
                class variableReadiness316 nowrapClass;
            end
        end