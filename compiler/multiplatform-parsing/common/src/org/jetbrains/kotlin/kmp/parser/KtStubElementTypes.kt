/*
 * Copyright 2010-2025 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.kmp.parser

import fleet.com.intellij.platform.syntax.syntaxElementTypeSetOf
import org.jetbrains.kotlin.kmp.lexer.KtTokens
import org.jetbrains.kotlin.kmp.utils.SyntaxElementTypesWithIds

object KtStubElementTypes : SyntaxElementTypesWithIds() {
    const val CLASS_ID: Int = KtTokens.ACTUAL_KEYWORD_ID + 1
    const val FUN_ID = CLASS_ID + 1
    const val PROPERTY_ID = FUN_ID + 1
    const val PROPERTY_ACCESSOR_ID = PROPERTY_ID + 1
    const val BACKING_FIELD_ID = PROPERTY_ACCESSOR_ID + 1
    const val TYPEALIAS_ID = BACKING_FIELD_ID + 1
    const val ENUM_ENTRY_ID = TYPEALIAS_ID + 1
    const val OBJECT_DECLARATION_ID = ENUM_ENTRY_ID + 1
    const val CLASS_INITIALIZER_ID = OBJECT_DECLARATION_ID + 1
    const val SECONDARY_CONSTRUCTOR_ID = CLASS_INITIALIZER_ID + 1
    const val PRIMARY_CONSTRUCTOR_ID = SECONDARY_CONSTRUCTOR_ID + 1
    const val VALUE_PARAMETER_ID = PRIMARY_CONSTRUCTOR_ID + 1
    const val VALUE_PARAMETER_LIST_ID = VALUE_PARAMETER_ID + 1
    const val TYPE_PARAMETER_ID = VALUE_PARAMETER_LIST_ID + 1
    const val TYPE_PARAMETER_LIST_ID = TYPE_PARAMETER_ID + 1
    const val ANNOTATION_ENTRY_ID = TYPE_PARAMETER_LIST_ID + 1
    const val ANNOTATION_ID = ANNOTATION_ENTRY_ID + 1
    const val ANNOTATION_TARGET_ID = ANNOTATION_ID + 1
    const val CLASS_BODY_ID = ANNOTATION_TARGET_ID + 1
    const val IMPORT_LIST_ID = CLASS_BODY_ID + 1
    const val FILE_ANNOTATION_LIST_ID = IMPORT_LIST_ID + 1
    const val IMPORT_DIRECTIVE_ID = FILE_ANNOTATION_LIST_ID + 1
    const val IMPORT_ALIAS_ID = IMPORT_DIRECTIVE_ID + 1
    const val PACKAGE_DIRECTIVE_ID = IMPORT_ALIAS_ID + 1
    const val MODIFIER_LIST_ID = PACKAGE_DIRECTIVE_ID + 1
    const val TYPE_CONSTRAINT_LIST_ID = MODIFIER_LIST_ID + 1
    const val TYPE_CONSTRAINT_ID = TYPE_CONSTRAINT_LIST_ID + 1
    const val NULLABLE_TYPE_ID = TYPE_CONSTRAINT_ID + 1
    const val INTERSECTION_TYPE_ID = NULLABLE_TYPE_ID + 1
    const val TYPE_REFERENCE_ID = INTERSECTION_TYPE_ID + 1
    const val USER_TYPE_ID = TYPE_REFERENCE_ID + 1
    const val DYNAMIC_TYPE_ID = USER_TYPE_ID + 1
    const val FUNCTION_TYPE_ID = DYNAMIC_TYPE_ID + 1
    const val TYPE_CODE_FRAGMENT_ID = FUNCTION_TYPE_ID + 1
    const val EXPRESSION_CODE_FRAGMENT_ID = TYPE_CODE_FRAGMENT_ID + 1
    const val BLOCK_CODE_FRAGMENT_ID = EXPRESSION_CODE_FRAGMENT_ID + 1
    const val TYPE_PROJECTION_ID = BLOCK_CODE_FRAGMENT_ID + 1
    const val FUNCTION_TYPE_RECEIVER_ID = TYPE_PROJECTION_ID + 1
    const val REFERENCE_EXPRESSION_ID = FUNCTION_TYPE_RECEIVER_ID + 1
    const val DOT_QUALIFIED_EXPRESSION_ID = REFERENCE_EXPRESSION_ID + 1
    const val ENUM_ENTRY_SUPERCLASS_REFERENCE_EXPRESSION_ID = DOT_QUALIFIED_EXPRESSION_ID + 1
    const val TYPE_ARGUMENT_LIST_ID = ENUM_ENTRY_SUPERCLASS_REFERENCE_EXPRESSION_ID + 1
    const val VALUE_ARGUMENT_LIST_ID = TYPE_ARGUMENT_LIST_ID + 1
    const val VALUE_ARGUMENT_ID = VALUE_ARGUMENT_LIST_ID + 1
    const val CONTRACT_EFFECT_LIST_ID = VALUE_ARGUMENT_ID + 1
    const val CONTRACT_EFFECT_ID = CONTRACT_EFFECT_LIST_ID + 1
    const val LAMBDA_ARGUMENT_ID = CONTRACT_EFFECT_ID + 1
    const val VALUE_ARGUMENT_NAME_ID = LAMBDA_ARGUMENT_ID + 1
    const val SUPER_TYPE_LIST_ID = VALUE_ARGUMENT_NAME_ID + 1
    const val INITIALIZER_LIST_ID = SUPER_TYPE_LIST_ID + 1
    const val DELEGATED_SUPER_TYPE_ENTRY_ID = INITIALIZER_LIST_ID + 1
    const val SUPER_TYPE_CALL_ENTRY_ID = DELEGATED_SUPER_TYPE_ENTRY_ID + 1
    const val SUPER_TYPE_ENTRY_ID = SUPER_TYPE_CALL_ENTRY_ID + 1
    const val CONSTRUCTOR_CALLEE_ID = SUPER_TYPE_ENTRY_ID + 1
    const val CONTEXT_RECEIVER_ID = CONSTRUCTOR_CALLEE_ID + 1
    const val CONTEXT_RECEIVER_LIST_ID = CONTEXT_RECEIVER_ID + 1
    const val NULL_ID = CONTEXT_RECEIVER_LIST_ID + 1
    const val BOOLEAN_CONSTANT_ID = NULL_ID + 1
    const val FLOAT_CONSTANT_ID = BOOLEAN_CONSTANT_ID + 1
    const val CHARACTER_CONSTANT_ID = FLOAT_CONSTANT_ID + 1
    const val INTEGER_CONSTANT_ID = CHARACTER_CONSTANT_ID + 1
    const val CLASS_LITERAL_EXPRESSION_ID = INTEGER_CONSTANT_ID + 1
    const val COLLECTION_LITERAL_EXPRESSION_ID = CLASS_LITERAL_EXPRESSION_ID + 1
    const val STRING_TEMPLATE_ID = COLLECTION_LITERAL_EXPRESSION_ID + 1
    const val LONG_STRING_TEMPLATE_ENTRY_ID = STRING_TEMPLATE_ID + 1
    const val SHORT_STRING_TEMPLATE_ENTRY_ID = LONG_STRING_TEMPLATE_ENTRY_ID + 1
    const val LITERAL_STRING_TEMPLATE_ENTRY_ID = SHORT_STRING_TEMPLATE_ENTRY_ID + 1
    const val ESCAPE_STRING_TEMPLATE_ENTRY_ID = LITERAL_STRING_TEMPLATE_ENTRY_ID + 1
    const val SCRIPT_ID = ESCAPE_STRING_TEMPLATE_ENTRY_ID + 1
    const val STRING_INTERPOLATION_PREFIX_ID = SCRIPT_ID + 1

    val CLASS = registerElementType(CLASS_ID, "CLASS")
    val FUNCTION = registerElementType(FUN_ID, "FUN")
    val PROPERTY = registerElementType(PROPERTY_ID, "PROPERTY")
    val PROPERTY_ACCESSOR = registerElementType(PROPERTY_ACCESSOR_ID, "PROPERTY_ACCESSOR")
    val BACKING_FIELD = registerElementType(BACKING_FIELD_ID, "BACKING_FIELD")
    val TYPEALIAS = registerElementType(TYPEALIAS_ID, "TYPEALIAS")

    val ENUM_ENTRY = registerElementType(ENUM_ENTRY_ID, "ENUM_ENTRY")
    val OBJECT_DECLARATION = registerElementType(OBJECT_DECLARATION_ID, "OBJECT_DECLARATION")
    val CLASS_INITIALIZER = registerElementType(CLASS_INITIALIZER_ID, "CLASS_INITIALIZER")
    val SECONDARY_CONSTRUCTOR = registerElementType(SECONDARY_CONSTRUCTOR_ID, "SECONDARY_CONSTRUCTOR")
    val PRIMARY_CONSTRUCTOR = registerElementType(PRIMARY_CONSTRUCTOR_ID, "PRIMARY_CONSTRUCTOR")

    val VALUE_PARAMETER = registerElementType(VALUE_PARAMETER_ID, "VALUE_PARAMETER")
    val VALUE_PARAMETER_LIST = registerElementType(VALUE_PARAMETER_LIST_ID, "VALUE_PARAMETER_LIST")

    val TYPE_PARAMETER = registerElementType(TYPE_PARAMETER_ID, "TYPE_PARAMETER")
    val TYPE_PARAMETER_LIST = registerElementType(TYPE_PARAMETER_LIST_ID, "TYPE_PARAMETER_LIST")

    val ANNOTATION_ENTRY = registerElementType(ANNOTATION_ENTRY_ID, "ANNOTATION_ENTRY")
    val ANNOTATION = registerElementType(ANNOTATION_ID, "ANNOTATION")

    val ANNOTATION_TARGET = registerElementType(ANNOTATION_TARGET_ID, "ANNOTATION_TARGET")

    val CLASS_BODY = registerElementType(CLASS_BODY_ID, "CLASS_BODY")

    val IMPORT_LIST = registerElementType(IMPORT_LIST_ID, "IMPORT_LIST")

    val FILE_ANNOTATION_LIST = registerElementType(FILE_ANNOTATION_LIST_ID, "FILE_ANNOTATION_LIST")

    val IMPORT_DIRECTIVE = registerElementType(IMPORT_DIRECTIVE_ID, "IMPORT_DIRECTIVE")

    val IMPORT_ALIAS = registerElementType(IMPORT_ALIAS_ID, "IMPORT_ALIAS")

    val PACKAGE_DIRECTIVE = registerElementType(PACKAGE_DIRECTIVE_ID, "PACKAGE_DIRECTIVE")

    val MODIFIER_LIST = registerElementType(MODIFIER_LIST_ID, "MODIFIER_LIST")

    val TYPE_CONSTRAINT_LIST = registerElementType(TYPE_CONSTRAINT_LIST_ID, "TYPE_CONSTRAINT_LIST")

    val TYPE_CONSTRAINT = registerElementType(TYPE_CONSTRAINT_ID, "TYPE_CONSTRAINT")

    val NULLABLE_TYPE = registerElementType(NULLABLE_TYPE_ID, "NULLABLE_TYPE")

    val INTERSECTION_TYPE = registerElementType(INTERSECTION_TYPE_ID, "INTERSECTION_TYPE")

    val TYPE_REFERENCE = registerElementType(TYPE_REFERENCE_ID, "TYPE_REFERENCE")

    val USER_TYPE = registerElementType(USER_TYPE_ID, "USER_TYPE")
    val DYNAMIC_TYPE = registerElementType(DYNAMIC_TYPE_ID, "DYNAMIC_TYPE")

    val FUNCTION_TYPE = registerElementType(FUNCTION_TYPE_ID, "FUNCTION_TYPE")

    val TYPE_CODE_FRAGMENT = registerElementType(TYPE_CODE_FRAGMENT_ID, "kotlin.TYPE_CODE_FRAGMENT")
    val EXPRESSION_CODE_FRAGMENT = registerElementType(EXPRESSION_CODE_FRAGMENT_ID, "kotlin.EXPRESSION_CODE_FRAGMENT")
    val BLOCK_CODE_FRAGMENT = registerElementType(BLOCK_CODE_FRAGMENT_ID, "kotlin.BLOCK_CODE_FRAGMENT")

    val TYPE_PROJECTION = registerElementType(TYPE_PROJECTION_ID, "TYPE_PROJECTION")

    val FUNCTION_TYPE_RECEIVER = registerElementType(FUNCTION_TYPE_RECEIVER_ID, "FUNCTION_TYPE_RECEIVER")

    val REFERENCE_EXPRESSION = registerElementType(REFERENCE_EXPRESSION_ID, "REFERENCE_EXPRESSION")
    val DOT_QUALIFIED_EXPRESSION = registerElementType(DOT_QUALIFIED_EXPRESSION_ID, "DOT_QUALIFIED_EXPRESSION")
    val ENUM_ENTRY_SUPERCLASS_REFERENCE_EXPRESSION =
        registerElementType(ENUM_ENTRY_SUPERCLASS_REFERENCE_EXPRESSION_ID, "ENUM_ENTRY_SUPERCLASS_REFERENCE_EXPRESSION")
    val TYPE_ARGUMENT_LIST = registerElementType(TYPE_ARGUMENT_LIST_ID, "TYPE_ARGUMENT_LIST")

    val VALUE_ARGUMENT_LIST = registerElementType(VALUE_ARGUMENT_LIST_ID, "VALUE_ARGUMENT_LIST")

    val VALUE_ARGUMENT = registerElementType(VALUE_ARGUMENT_ID, "VALUE_ARGUMENT")

    val CONTRACT_EFFECT_LIST = registerElementType(CONTRACT_EFFECT_LIST_ID, "CONTRACT_EFFECT_LIST")

    val CONTRACT_EFFECT = registerElementType(CONTRACT_EFFECT_ID, "CONTRACT_EFFECT")

    val LAMBDA_ARGUMENT = registerElementType(LAMBDA_ARGUMENT_ID, "LAMBDA_ARGUMENT")

    val VALUE_ARGUMENT_NAME = registerElementType(VALUE_ARGUMENT_NAME_ID, "VALUE_ARGUMENT_NAME")

    val SUPER_TYPE_LIST = registerElementType(SUPER_TYPE_LIST_ID, "SUPER_TYPE_LIST")

    val INITIALIZER_LIST = registerElementType(INITIALIZER_LIST_ID, "INITIALIZER_LIST")

    val DELEGATED_SUPER_TYPE_ENTRY = registerElementType(DELEGATED_SUPER_TYPE_ENTRY_ID, "DELEGATED_SUPER_TYPE_ENTRY")

    val SUPER_TYPE_CALL_ENTRY = registerElementType(SUPER_TYPE_CALL_ENTRY_ID, "SUPER_TYPE_CALL_ENTRY")
    val SUPER_TYPE_ENTRY = registerElementType(SUPER_TYPE_ENTRY_ID, "SUPER_TYPE_ENTRY")
    val CONSTRUCTOR_CALLEE = registerElementType(CONSTRUCTOR_CALLEE_ID, "CONSTRUCTOR_CALLEE")

    val CONTEXT_RECEIVER = registerElementType(CONTEXT_RECEIVER_ID, "CONTEXT_RECEIVER")
    val CONTEXT_RECEIVER_LIST = registerElementType(CONTEXT_RECEIVER_LIST_ID, "CONTEXT_RECEIVER_LIST")

    val NULL = registerElementType(NULL_ID, "NULL")
    val BOOLEAN_CONSTANT = registerElementType(BOOLEAN_CONSTANT_ID, "BOOLEAN_CONSTANT")
    val FLOAT_CONSTANT = registerElementType(FLOAT_CONSTANT_ID, "FLOAT_CONSTANT")
    val CHARACTER_CONSTANT = registerElementType(CHARACTER_CONSTANT_ID, "CHARACTER_CONSTANT")
    val INTEGER_CONSTANT = registerElementType(INTEGER_CONSTANT_ID, "INTEGER_CONSTANT")
    val CLASS_LITERAL_EXPRESSION = registerElementType(CLASS_LITERAL_EXPRESSION_ID, "CLASS_LITERAL_EXPRESSION")
    val COLLECTION_LITERAL_EXPRESSION = registerElementType(COLLECTION_LITERAL_EXPRESSION_ID, "COLLECTION_LITERAL_EXPRESSION")

    val STRING_TEMPLATE = registerElementType(STRING_TEMPLATE_ID, "STRING_TEMPLATE")

    val LONG_STRING_TEMPLATE_ENTRY = registerElementType(LONG_STRING_TEMPLATE_ENTRY_ID, "LONG_STRING_TEMPLATE_ENTRY")

    val SHORT_STRING_TEMPLATE_ENTRY = registerElementType(SHORT_STRING_TEMPLATE_ENTRY_ID, "SHORT_STRING_TEMPLATE_ENTRY")

    val LITERAL_STRING_TEMPLATE_ENTRY = registerElementType(LITERAL_STRING_TEMPLATE_ENTRY_ID, "LITERAL_STRING_TEMPLATE_ENTRY")

    val ESCAPE_STRING_TEMPLATE_ENTRY = registerElementType(ESCAPE_STRING_TEMPLATE_ENTRY_ID, "ESCAPE_STRING_TEMPLATE_ENTRY")

    val SCRIPT = registerElementType(SCRIPT_ID, "SCRIPT")

    val STRING_INTERPOLATION_PREFIX = registerElementType(STRING_INTERPOLATION_PREFIX_ID, "STRING_INTERPOLATION_PREFIX")

    val CONSTANT_EXPRESSIONS_TYPES = syntaxElementTypeSetOf(
        NULL,
        BOOLEAN_CONSTANT,
        FLOAT_CONSTANT,
        CHARACTER_CONSTANT,
        INTEGER_CONSTANT,

        REFERENCE_EXPRESSION,
        DOT_QUALIFIED_EXPRESSION,

        STRING_TEMPLATE,

        CLASS_LITERAL_EXPRESSION,

        COLLECTION_LITERAL_EXPRESSION
    )
}
